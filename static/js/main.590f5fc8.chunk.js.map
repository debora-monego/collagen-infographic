{"version":3,"sources":["components/ui/Tabs.js","components/ui/Slider.js","App.js","reportWebVitals.js","index.js"],"names":["Tabs","_ref","children","activeTab","setActiveTab","useState","tabHeaders","map","child","index","React","createElement","key","className","onClick","props","title","activeContent","Tab","_ref2","Slider","value","onChange","min","max","step","type","e","Number","target","ElaborateCollagenInfographic","age","setAge","draggedAminos","setDraggedAminos","amino","draggable","onDrag","length","handleDrag","join","resetChain","ResponsiveContainer","width","height","BarChart","data","name","percentage","location","XAxis","dataKey","YAxis","Tooltip","Bar","fill","style","reportWebVitals","onPerfEntry","Function","__webpack_require__","then","bind","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode","App"],"mappings":"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","file":"static/js/main.590f5fc8.chunk.js","sourcesContent":["// src/components/ui/Tabs.js\nimport React, { useState } from 'react';\n\nconst Tabs = ({ children }) => {\n    const [activeTab, setActiveTab] = useState(0);\n\n    const tabHeaders = children.map((child, index) => (\n        <button\n            key={index}\n            className={`px-4 py-2 ${activeTab === index ? 'bg-blue-500 text-white' : 'bg-gray-200'}`}\n            onClick={() => setActiveTab(index)}\n        >\n            {child.props.title}\n        </button>\n    ));\n\n    const activeContent = children[activeTab];\n\n    return (\n        <div>\n            <div className=\"flex space-x-2\">{tabHeaders}</div>\n            <div className=\"mt-4\">{activeContent}</div>\n        </div>\n    );\n};\n\nconst Tab = ({ children }) => {\n    return <div>{children}</div>;\n};\n\nexport { Tabs, Tab };\n","// src/components/ui/Slider.js\nimport React from 'react';\n\nconst Slider = ({ value, onChange, min = 0, max = 100, step = 1 }) => {\n    return (\n        <input\n            type=\"range\"\n            value={value}\n            onChange={(e) => onChange(Number(e.target.value))}\n            min={min}\n            max={max}\n            step={step}\n            className=\"w-full\"\n        />\n    );\n};\n\nexport default Slider;\n","import React, { useState } from 'react';\nimport { Tabs, Tab } from './components/ui/Tabs';\nimport Slider from './components/ui/Slider';\nimport { BarChart, Bar, XAxis, YAxis, Tooltip, ResponsiveContainer } from 'recharts';\n\nconst ElaborateCollagenInfographic = () => {\n  const [age, setAge] = useState(25);\n  const [draggedAminos, setDraggedAminos] = useState([]);\n\n  const collagenTypes = [\n    { name: 'Type I', percentage: 90, location: 'Skin, bones, tendons' },\n    { name: 'Type II', percentage: 5, location: 'Cartilage' },\n    { name: 'Type III', percentage: 3, location: 'Blood vessels, skin' },\n    { name: 'Other', percentage: 2, location: 'Various tissues' },\n  ];\n\n  const handleDrag = (amino) => {\n    if (draggedAminos.length < 3) {\n      setDraggedAminos([...draggedAminos, amino]);\n    }\n  };\n\n  const resetChain = () => {\n    setDraggedAminos([]);\n  };\n\n  return (\n    <div className=\"w-full max-w-4xl mx-auto\">\n      <h1 className=\"text-3xl font-bold text-center\">Collagen: The Body's Building Blocks</h1>\n      <Tabs>\n        <Tab title=\"What is Collagen?\">\n          <p>Collagen is the most abundant protein in the human body, making up about 30% of its protein content. It's a key structural protein found in various connective tissues.</p>\n          <div>\n            <h3>Collagen Structure</h3>\n            <p>Drag the amino acids to form a collagen chain:</p>\n            <div>\n              {['Glycine', 'Proline', 'Hydroxyproline'].map((amino) => (\n                <div key={amino} draggable onDrag={() => handleDrag(amino)}>\n                  {amino}\n                </div>\n              ))}\n            </div>\n            <div>{draggedAminos.join(' - ')}</div>\n            <button onClick={resetChain}>Reset Chain</button>\n          </div>\n        </Tab>\n        <Tab title=\"Types of Collagen\">\n          <h3>Distribution of Collagen Types</h3>\n          <ResponsiveContainer width=\"100%\" height={300}>\n            <BarChart data={collagenTypes}>\n              <XAxis dataKey=\"name\" />\n              <YAxis />\n              <Tooltip />\n              <Bar dataKey=\"percentage\" fill=\"#8884d8\" />\n            </BarChart>\n          </ResponsiveContainer>\n        </Tab>\n        <Tab title=\"Collagen & Aging\">\n          <h3>Collagen Production vs Age</h3>\n          <Slider value={age} onChange={(value) => setAge(value)} max={80} step={1} />\n          <p>Age: {age} years</p>\n          <div className=\"h-4 bg-gradient-to-r from-green-500 to-red-500 rounded\">\n            <div className=\"h-full bg-green-500\" style={{ width: `${100 - age}%` }}></div>\n          </div>\n          <p>Collagen production: {100 - age}%</p>\n        </Tab>\n        <Tab title=\"Build Collagen\">\n          <h3>Supporting Collagen Production</h3>\n          <ul>\n            <li>Eat protein-rich foods (e.g., fish, chicken, eggs, dairy)</li>\n            <li>Consume vitamin C-rich foods (e.g., citrus fruits, berries, leafy greens)</li>\n            <li>Include foods with zinc and copper (e.g., nuts, whole grains)</li>\n            <li>Protect your skin from excessive sun exposure</li>\n            <li>Stay hydrated</li>\n            <li>Avoid smoking and excessive alcohol consumption</li>\n          </ul>\n        </Tab>\n      </Tabs>\n    </div>\n  );\n};\n\nexport default ElaborateCollagenInfographic;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}